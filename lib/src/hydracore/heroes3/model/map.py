import re

from .artifact import ArtifactId
from .spell import SpellId
from typing import List, Optional


class MapTerrainInfo:
    def is_empty(self, x: int, y: int, z: int) -> bool:
        """
        Returns true if cell is x, y, z is empty on the map
        """
        raise NotImplementedError()

    @property
    def Size(self) -> int:
        """
        Size of the map
        """
        raise NotImplementedError()


class MapBannedInfo:
    """
    Some info need to be used for serialize.

    - Allowed spells
    - Allowed artifacts

    Could be used in Template - as bans also relates to templates
    """

    def banned_spells(self) -> List[SpellId]:
        """
        Return list of banned spells on current map
        """
        raise NotImplementedError()

    def banned_artifacts(self) -> List[ArtifactId]:
        """
        Return list of banned artifacts on current map
        """
        raise NotImplementedError()


def maybe_template(title: Optional[str] = None,
                   description: Optional[str] = None,
                   map_file: Optional[str] = None) -> bool:
    """
    Decide whether this map was generated by a RMG or not.
    Tries to figure out this from title, description, map file name
    """
    return _maybe_template(title, description, map_file)


def maybe_map_info(title: Optional[str] = None,
                   description: Optional[str] = None,
                   map_file: Optional[str] = None) -> MapTerrainInfo:
    """
    Gets info about map from description and etc
    """
    return _maybe_map_info(title, description, map_file)

# ----------------------------------------------------------- Implementation --


def _maybe_template(title: Optional[str] = None,
                    description: Optional[str] = None,
                    map_file: Optional[str] = None) -> bool:

    return description and ('Random Map Generator' in description)


def _maybe_map_info(title: Optional[str] = None,
                    description: Optional[str] = None,
                    map_file: Optional[str] = None) -> MapTerrainInfo:

    m = re.search(r'size ([\d]+),', description)
    if not m:
        return EmptyMap(size=None)
    return EmptyMap(size=int(m.group(1)))


class NolimitsMap(MapBannedInfo):
    def banned_spells(self) -> List[SpellId]:
        return []

    def banned_artifacts(self) -> List[ArtifactId]:
        return []


class EmptyMap(MapTerrainInfo):

    def __init__(self, size: Optional[int]):
        self._size = size

    def is_empty(self, x: int, y: int, z: int) -> bool:
        return True

    @property
    def Size(self) -> int:
        return self._size

class TemplateMapInfo(MapBannedInfo):
    def __init__(self, banned_spells: List[SpellId], banned_artifacts: List[ArtifactId]):
        self._banned_spells = banned_spells
        self._banned_artifacts = banned_artifacts

    def banned_spells(self) -> List[SpellId]:
        return self._banned_spells

    def banned_artifacts(self) -> List[ArtifactId]:
        return self._banned_artifacts


def OpenMap(NolimitMap, EmptyMap):
    pass
